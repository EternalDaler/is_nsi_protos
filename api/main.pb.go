// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: proto/main.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	mi := &file_proto_main_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_proto_main_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_proto_main_proto_rawDescGZIP(), []int{0}
}

func (x *Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OriginalName       string `protobuf:"bytes,2,opt,name=original_name,json=originalName,proto3" json:"original_name,omitempty"`
	CleanedName        string `protobuf:"bytes,3,opt,name=cleaned_name,json=cleanedName,proto3" json:"cleaned_name,omitempty"`
	Rule_1             bool   `protobuf:"varint,4,opt,name=rule_1,json=rule1,proto3" json:"rule_1,omitempty"`
	Rule_2             bool   `protobuf:"varint,5,opt,name=rule_2,json=rule2,proto3" json:"rule_2,omitempty"`
	Rule_2Description  string `protobuf:"bytes,6,opt,name=rule_2_description,json=rule2Description,proto3" json:"rule_2_description,omitempty"`
	Rule_3             bool   `protobuf:"varint,7,opt,name=rule_3,json=rule3,proto3" json:"rule_3,omitempty"`
	Rule_3Description  string `protobuf:"bytes,8,opt,name=rule_3_description,json=rule3Description,proto3" json:"rule_3_description,omitempty"`
	Rule_4             bool   `protobuf:"varint,9,opt,name=rule_4,json=rule4,proto3" json:"rule_4,omitempty"`
	Rule_4Description  string `protobuf:"bytes,10,opt,name=rule_4_description,json=rule4Description,proto3" json:"rule_4_description,omitempty"`
	Rule_5             bool   `protobuf:"varint,11,opt,name=rule_5,json=rule5,proto3" json:"rule_5,omitempty"`
	Rule_5Description  string `protobuf:"bytes,12,opt,name=rule_5_description,json=rule5Description,proto3" json:"rule_5_description,omitempty"`
	Rule_6             bool   `protobuf:"varint,13,opt,name=rule_6,json=rule6,proto3" json:"rule_6,omitempty"`
	Rule_6Description  string `protobuf:"bytes,14,opt,name=rule_6_description,json=rule6Description,proto3" json:"rule_6_description,omitempty"`
	Rule_7             bool   `protobuf:"varint,15,opt,name=rule_7,json=rule7,proto3" json:"rule_7,omitempty"`
	Rule_7Description  string `protobuf:"bytes,16,opt,name=rule_7_description,json=rule7Description,proto3" json:"rule_7_description,omitempty"`
	Rule_8             bool   `protobuf:"varint,17,opt,name=rule_8,json=rule8,proto3" json:"rule_8,omitempty"`
	Rule_8Description  string `protobuf:"bytes,18,opt,name=rule_8_description,json=rule8Description,proto3" json:"rule_8_description,omitempty"`
	Rule_9             bool   `protobuf:"varint,19,opt,name=rule_9,json=rule9,proto3" json:"rule_9,omitempty"`
	Rule_9Description  string `protobuf:"bytes,20,opt,name=rule_9_description,json=rule9Description,proto3" json:"rule_9_description,omitempty"`
	Rule_10            bool   `protobuf:"varint,21,opt,name=rule_10,json=rule10,proto3" json:"rule_10,omitempty"`
	Rule_10Description string `protobuf:"bytes,22,opt,name=rule_10_description,json=rule10Description,proto3" json:"rule_10_description,omitempty"`
	Rule_17            bool   `protobuf:"varint,23,opt,name=rule_17,json=rule17,proto3" json:"rule_17,omitempty"`
	Rule_17Description string `protobuf:"bytes,24,opt,name=rule_17_description,json=rule17Description,proto3" json:"rule_17_description,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	mi := &file_proto_main_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_proto_main_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_proto_main_proto_rawDescGZIP(), []int{1}
}

func (x *Record) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Record) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *Record) GetCleanedName() string {
	if x != nil {
		return x.CleanedName
	}
	return ""
}

func (x *Record) GetRule_1() bool {
	if x != nil {
		return x.Rule_1
	}
	return false
}

func (x *Record) GetRule_2() bool {
	if x != nil {
		return x.Rule_2
	}
	return false
}

func (x *Record) GetRule_2Description() string {
	if x != nil {
		return x.Rule_2Description
	}
	return ""
}

func (x *Record) GetRule_3() bool {
	if x != nil {
		return x.Rule_3
	}
	return false
}

func (x *Record) GetRule_3Description() string {
	if x != nil {
		return x.Rule_3Description
	}
	return ""
}

func (x *Record) GetRule_4() bool {
	if x != nil {
		return x.Rule_4
	}
	return false
}

func (x *Record) GetRule_4Description() string {
	if x != nil {
		return x.Rule_4Description
	}
	return ""
}

func (x *Record) GetRule_5() bool {
	if x != nil {
		return x.Rule_5
	}
	return false
}

func (x *Record) GetRule_5Description() string {
	if x != nil {
		return x.Rule_5Description
	}
	return ""
}

func (x *Record) GetRule_6() bool {
	if x != nil {
		return x.Rule_6
	}
	return false
}

func (x *Record) GetRule_6Description() string {
	if x != nil {
		return x.Rule_6Description
	}
	return ""
}

func (x *Record) GetRule_7() bool {
	if x != nil {
		return x.Rule_7
	}
	return false
}

func (x *Record) GetRule_7Description() string {
	if x != nil {
		return x.Rule_7Description
	}
	return ""
}

func (x *Record) GetRule_8() bool {
	if x != nil {
		return x.Rule_8
	}
	return false
}

func (x *Record) GetRule_8Description() string {
	if x != nil {
		return x.Rule_8Description
	}
	return ""
}

func (x *Record) GetRule_9() bool {
	if x != nil {
		return x.Rule_9
	}
	return false
}

func (x *Record) GetRule_9Description() string {
	if x != nil {
		return x.Rule_9Description
	}
	return ""
}

func (x *Record) GetRule_10() bool {
	if x != nil {
		return x.Rule_10
	}
	return false
}

func (x *Record) GetRule_10Description() string {
	if x != nil {
		return x.Rule_10Description
	}
	return ""
}

func (x *Record) GetRule_17() bool {
	if x != nil {
		return x.Rule_17
	}
	return false
}

func (x *Record) GetRule_17Description() string {
	if x != nil {
		return x.Rule_17Description
	}
	return ""
}

type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNames        uint32 `protobuf:"varint,1,opt,name=total_names,json=totalNames,proto3" json:"total_names,omitempty"`
	Rule_1FalseCount  uint32 `protobuf:"varint,2,opt,name=rule_1_false_count,json=rule1FalseCount,proto3" json:"rule_1_false_count,omitempty"`
	Rule_2ErrorCount  uint32 `protobuf:"varint,3,opt,name=rule_2_error_count,json=rule2ErrorCount,proto3" json:"rule_2_error_count,omitempty"`
	Rule_3ErrorCount  uint32 `protobuf:"varint,4,opt,name=rule_3_error_count,json=rule3ErrorCount,proto3" json:"rule_3_error_count,omitempty"`
	Rule_4ErrorCount  uint32 `protobuf:"varint,5,opt,name=rule_4_error_count,json=rule4ErrorCount,proto3" json:"rule_4_error_count,omitempty"`
	Rule_5ErrorCount  uint32 `protobuf:"varint,6,opt,name=rule_5_error_count,json=rule5ErrorCount,proto3" json:"rule_5_error_count,omitempty"`
	Rule_6ErrorCount  uint32 `protobuf:"varint,7,opt,name=rule_6_error_count,json=rule6ErrorCount,proto3" json:"rule_6_error_count,omitempty"`
	Rule_7ErrorCount  uint32 `protobuf:"varint,8,opt,name=rule_7_error_count,json=rule7ErrorCount,proto3" json:"rule_7_error_count,omitempty"`
	Rule_8ErrorCount  uint32 `protobuf:"varint,9,opt,name=rule_8_error_count,json=rule8ErrorCount,proto3" json:"rule_8_error_count,omitempty"`
	Rule_9ErrorCount  uint32 `protobuf:"varint,10,opt,name=rule_9_error_count,json=rule9ErrorCount,proto3" json:"rule_9_error_count,omitempty"`
	Rule_10ErrorCount uint32 `protobuf:"varint,11,opt,name=rule_10_error_count,json=rule10ErrorCount,proto3" json:"rule_10_error_count,omitempty"`
	Rule_17ErrorCount uint32 `protobuf:"varint,12,opt,name=rule_17_error_count,json=rule17ErrorCount,proto3" json:"rule_17_error_count,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	mi := &file_proto_main_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_main_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_proto_main_proto_rawDescGZIP(), []int{2}
}

func (x *Summary) GetTotalNames() uint32 {
	if x != nil {
		return x.TotalNames
	}
	return 0
}

func (x *Summary) GetRule_1FalseCount() uint32 {
	if x != nil {
		return x.Rule_1FalseCount
	}
	return 0
}

func (x *Summary) GetRule_2ErrorCount() uint32 {
	if x != nil {
		return x.Rule_2ErrorCount
	}
	return 0
}

func (x *Summary) GetRule_3ErrorCount() uint32 {
	if x != nil {
		return x.Rule_3ErrorCount
	}
	return 0
}

func (x *Summary) GetRule_4ErrorCount() uint32 {
	if x != nil {
		return x.Rule_4ErrorCount
	}
	return 0
}

func (x *Summary) GetRule_5ErrorCount() uint32 {
	if x != nil {
		return x.Rule_5ErrorCount
	}
	return 0
}

func (x *Summary) GetRule_6ErrorCount() uint32 {
	if x != nil {
		return x.Rule_6ErrorCount
	}
	return 0
}

func (x *Summary) GetRule_7ErrorCount() uint32 {
	if x != nil {
		return x.Rule_7ErrorCount
	}
	return 0
}

func (x *Summary) GetRule_8ErrorCount() uint32 {
	if x != nil {
		return x.Rule_8ErrorCount
	}
	return 0
}

func (x *Summary) GetRule_9ErrorCount() uint32 {
	if x != nil {
		return x.Rule_9ErrorCount
	}
	return 0
}

func (x *Summary) GetRule_10ErrorCount() uint32 {
	if x != nil {
		return x.Rule_10ErrorCount
	}
	return 0
}

func (x *Summary) GetRule_17ErrorCount() uint32 {
	if x != nil {
		return x.Rule_17ErrorCount
	}
	return 0
}

type NormalizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *NormalizeRequest) Reset() {
	*x = NormalizeRequest{}
	mi := &file_proto_main_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NormalizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizeRequest) ProtoMessage() {}

func (x *NormalizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_main_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizeRequest.ProtoReflect.Descriptor instead.
func (*NormalizeRequest) Descriptor() ([]byte, []int) {
	return file_proto_main_proto_rawDescGZIP(), []int{3}
}

func (x *NormalizeRequest) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type NormalizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*Record `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	Summary *Summary  `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *NormalizeResponse) Reset() {
	*x = NormalizeResponse{}
	mi := &file_proto_main_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NormalizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalizeResponse) ProtoMessage() {}

func (x *NormalizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_main_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalizeResponse.ProtoReflect.Descriptor instead.
func (*NormalizeResponse) Descriptor() ([]byte, []int) {
	return file_proto_main_proto_rawDescGZIP(), []int{4}
}

func (x *NormalizeResponse) GetRecords() []*Record {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *NormalizeResponse) GetSummary() *Summary {
	if x != nil {
		return x.Summary
	}
	return nil
}

var File_proto_main_proto protoreflect.FileDescriptor

var file_proto_main_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x2a, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x06, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x65, 0x61,
	0x6e, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x31, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x72, 0x75, 0x6c, 0x65, 0x32, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x32, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x32, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x33, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x33, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x33, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x33, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x34, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x34, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x75, 0x6c,
	0x65, 0x34, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x35, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x35, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x35, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x35, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x36, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x36, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x36, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x36, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x37, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x37, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x37, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x75, 0x6c, 0x65,
	0x37, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x38, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x38, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x38, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x75, 0x6c, 0x65, 0x38, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x39, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x39, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x39, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x39, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x31,
	0x30, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x31, 0x30, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x31, 0x30, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x75,
	0x6c, 0x65, 0x31, 0x30, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x31, 0x37, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x31, 0x37, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x31, 0x37, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x75, 0x6c, 0x65, 0x31, 0x37, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x04, 0x0a, 0x07, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x31, 0x5f,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x31, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x32, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x72, 0x75, 0x6c, 0x65, 0x32, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x33, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x75, 0x6c,
	0x65, 0x33, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x34, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x34, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x35, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x35, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x36,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x36, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x37, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x72, 0x75, 0x6c, 0x65, 0x37, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x38, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x75,
	0x6c, 0x65, 0x38, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x12, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x39, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x39,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x31, 0x30, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x31, 0x30, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x31, 0x37, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x31, 0x37, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x10, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x64,
	0x0a, 0x11, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x32, 0x50, 0x0a, 0x10, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_main_proto_rawDescOnce sync.Once
	file_proto_main_proto_rawDescData = file_proto_main_proto_rawDesc
)

func file_proto_main_proto_rawDescGZIP() []byte {
	file_proto_main_proto_rawDescOnce.Do(func() {
		file_proto_main_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_main_proto_rawDescData)
	})
	return file_proto_main_proto_rawDescData
}

var file_proto_main_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_main_proto_goTypes = []any{
	(*Item)(nil),              // 0: main.Item
	(*Record)(nil),            // 1: main.Record
	(*Summary)(nil),           // 2: main.Summary
	(*NormalizeRequest)(nil),  // 3: main.NormalizeRequest
	(*NormalizeResponse)(nil), // 4: main.NormalizeResponse
}
var file_proto_main_proto_depIdxs = []int32{
	0, // 0: main.NormalizeRequest.items:type_name -> main.Item
	1, // 1: main.NormalizeResponse.records:type_name -> main.Record
	2, // 2: main.NormalizeResponse.summary:type_name -> main.Summary
	3, // 3: main.NormalizeService.Normalize:input_type -> main.NormalizeRequest
	4, // 4: main.NormalizeService.Normalize:output_type -> main.NormalizeResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_main_proto_init() }
func file_proto_main_proto_init() {
	if File_proto_main_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_main_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_main_proto_goTypes,
		DependencyIndexes: file_proto_main_proto_depIdxs,
		MessageInfos:      file_proto_main_proto_msgTypes,
	}.Build()
	File_proto_main_proto = out.File
	file_proto_main_proto_rawDesc = nil
	file_proto_main_proto_goTypes = nil
	file_proto_main_proto_depIdxs = nil
}
