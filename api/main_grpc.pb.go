// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/main.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NormalizeService_Normalize_FullMethodName = "/main.NormalizeService/Normalize"
)

// NormalizeServiceClient is the client API for NormalizeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NormalizeServiceClient interface {
	Normalize(ctx context.Context, in *NormalizeRequest, opts ...grpc.CallOption) (*NormalizeResponse, error)
}

type normalizeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNormalizeServiceClient(cc grpc.ClientConnInterface) NormalizeServiceClient {
	return &normalizeServiceClient{cc}
}

func (c *normalizeServiceClient) Normalize(ctx context.Context, in *NormalizeRequest, opts ...grpc.CallOption) (*NormalizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NormalizeResponse)
	err := c.cc.Invoke(ctx, NormalizeService_Normalize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NormalizeServiceServer is the server API for NormalizeService service.
// All implementations must embed UnimplementedNormalizeServiceServer
// for forward compatibility.
type NormalizeServiceServer interface {
	Normalize(context.Context, *NormalizeRequest) (*NormalizeResponse, error)
	mustEmbedUnimplementedNormalizeServiceServer()
}

// UnimplementedNormalizeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNormalizeServiceServer struct{}

func (UnimplementedNormalizeServiceServer) Normalize(context.Context, *NormalizeRequest) (*NormalizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Normalize not implemented")
}
func (UnimplementedNormalizeServiceServer) mustEmbedUnimplementedNormalizeServiceServer() {}
func (UnimplementedNormalizeServiceServer) testEmbeddedByValue()                          {}

// UnsafeNormalizeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NormalizeServiceServer will
// result in compilation errors.
type UnsafeNormalizeServiceServer interface {
	mustEmbedUnimplementedNormalizeServiceServer()
}

func RegisterNormalizeServiceServer(s grpc.ServiceRegistrar, srv NormalizeServiceServer) {
	// If the following call pancis, it indicates UnimplementedNormalizeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NormalizeService_ServiceDesc, srv)
}

func _NormalizeService_Normalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizeServiceServer).Normalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NormalizeService_Normalize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizeServiceServer).Normalize(ctx, req.(*NormalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NormalizeService_ServiceDesc is the grpc.ServiceDesc for NormalizeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NormalizeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.NormalizeService",
	HandlerType: (*NormalizeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Normalize",
			Handler:    _NormalizeService_Normalize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}

const (
	NormalizePyService_NormalizeClassifier_FullMethodName                       = "/main.NormalizePyService/NormalizeClassifier"
	NormalizePyService_GetDuplicates_FullMethodName                             = "/main.NormalizePyService/GetDuplicates"
	NormalizePyService_FirstSingularNoun_And_NoGrammaticalErrors_FullMethodName = "/main.NormalizePyService/FirstSingularNoun_And_NoGrammaticalErrors"
)

// NormalizePyServiceClient is the client API for NormalizePyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NormalizePyServiceClient interface {
	NormalizeClassifier(ctx context.Context, in *NormalizeClassifierRequest, opts ...grpc.CallOption) (*NormalizeClassifierResponse, error)
	GetDuplicates(ctx context.Context, in *DuplicateRequest, opts ...grpc.CallOption) (*DuplicateResponse, error)
	FirstSingularNoun_And_NoGrammaticalErrors(ctx context.Context, in *FirstSingularNoun_And_NoGrammaticalErrorsRequest, opts ...grpc.CallOption) (*FirstSingularNoun_And_NoGrammaticalErrorsResponse, error)
}

type normalizePyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNormalizePyServiceClient(cc grpc.ClientConnInterface) NormalizePyServiceClient {
	return &normalizePyServiceClient{cc}
}

func (c *normalizePyServiceClient) NormalizeClassifier(ctx context.Context, in *NormalizeClassifierRequest, opts ...grpc.CallOption) (*NormalizeClassifierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NormalizeClassifierResponse)
	err := c.cc.Invoke(ctx, NormalizePyService_NormalizeClassifier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *normalizePyServiceClient) GetDuplicates(ctx context.Context, in *DuplicateRequest, opts ...grpc.CallOption) (*DuplicateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DuplicateResponse)
	err := c.cc.Invoke(ctx, NormalizePyService_GetDuplicates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *normalizePyServiceClient) FirstSingularNoun_And_NoGrammaticalErrors(ctx context.Context, in *FirstSingularNoun_And_NoGrammaticalErrorsRequest, opts ...grpc.CallOption) (*FirstSingularNoun_And_NoGrammaticalErrorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FirstSingularNoun_And_NoGrammaticalErrorsResponse)
	err := c.cc.Invoke(ctx, NormalizePyService_FirstSingularNoun_And_NoGrammaticalErrors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NormalizePyServiceServer is the server API for NormalizePyService service.
// All implementations must embed UnimplementedNormalizePyServiceServer
// for forward compatibility.
type NormalizePyServiceServer interface {
	NormalizeClassifier(context.Context, *NormalizeClassifierRequest) (*NormalizeClassifierResponse, error)
	GetDuplicates(context.Context, *DuplicateRequest) (*DuplicateResponse, error)
	FirstSingularNoun_And_NoGrammaticalErrors(context.Context, *FirstSingularNoun_And_NoGrammaticalErrorsRequest) (*FirstSingularNoun_And_NoGrammaticalErrorsResponse, error)
	mustEmbedUnimplementedNormalizePyServiceServer()
}

// UnimplementedNormalizePyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNormalizePyServiceServer struct{}

func (UnimplementedNormalizePyServiceServer) NormalizeClassifier(context.Context, *NormalizeClassifierRequest) (*NormalizeClassifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NormalizeClassifier not implemented")
}
func (UnimplementedNormalizePyServiceServer) GetDuplicates(context.Context, *DuplicateRequest) (*DuplicateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDuplicates not implemented")
}
func (UnimplementedNormalizePyServiceServer) FirstSingularNoun_And_NoGrammaticalErrors(context.Context, *FirstSingularNoun_And_NoGrammaticalErrorsRequest) (*FirstSingularNoun_And_NoGrammaticalErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirstSingularNoun_And_NoGrammaticalErrors not implemented")
}
func (UnimplementedNormalizePyServiceServer) mustEmbedUnimplementedNormalizePyServiceServer() {}
func (UnimplementedNormalizePyServiceServer) testEmbeddedByValue()                            {}

// UnsafeNormalizePyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NormalizePyServiceServer will
// result in compilation errors.
type UnsafeNormalizePyServiceServer interface {
	mustEmbedUnimplementedNormalizePyServiceServer()
}

func RegisterNormalizePyServiceServer(s grpc.ServiceRegistrar, srv NormalizePyServiceServer) {
	// If the following call pancis, it indicates UnimplementedNormalizePyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NormalizePyService_ServiceDesc, srv)
}

func _NormalizePyService_NormalizeClassifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalizeClassifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizePyServiceServer).NormalizeClassifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NormalizePyService_NormalizeClassifier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizePyServiceServer).NormalizeClassifier(ctx, req.(*NormalizeClassifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NormalizePyService_GetDuplicates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizePyServiceServer).GetDuplicates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NormalizePyService_GetDuplicates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizePyServiceServer).GetDuplicates(ctx, req.(*DuplicateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NormalizePyService_FirstSingularNoun_And_NoGrammaticalErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirstSingularNoun_And_NoGrammaticalErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NormalizePyServiceServer).FirstSingularNoun_And_NoGrammaticalErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NormalizePyService_FirstSingularNoun_And_NoGrammaticalErrors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NormalizePyServiceServer).FirstSingularNoun_And_NoGrammaticalErrors(ctx, req.(*FirstSingularNoun_And_NoGrammaticalErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NormalizePyService_ServiceDesc is the grpc.ServiceDesc for NormalizePyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NormalizePyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.NormalizePyService",
	HandlerType: (*NormalizePyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NormalizeClassifier",
			Handler:    _NormalizePyService_NormalizeClassifier_Handler,
		},
		{
			MethodName: "GetDuplicates",
			Handler:    _NormalizePyService_GetDuplicates_Handler,
		},
		{
			MethodName: "FirstSingularNoun_And_NoGrammaticalErrors",
			Handler:    _NormalizePyService_FirstSingularNoun_And_NoGrammaticalErrors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}

const (
	OkpdService_GetSimilar_FullMethodName = "/main.OkpdService/GetSimilar"
)

// OkpdServiceClient is the client API for OkpdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OkpdServiceClient interface {
	GetSimilar(ctx context.Context, in *GetSimilarRequest, opts ...grpc.CallOption) (*GetSimilarResponse, error)
}

type okpdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOkpdServiceClient(cc grpc.ClientConnInterface) OkpdServiceClient {
	return &okpdServiceClient{cc}
}

func (c *okpdServiceClient) GetSimilar(ctx context.Context, in *GetSimilarRequest, opts ...grpc.CallOption) (*GetSimilarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSimilarResponse)
	err := c.cc.Invoke(ctx, OkpdService_GetSimilar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OkpdServiceServer is the server API for OkpdService service.
// All implementations must embed UnimplementedOkpdServiceServer
// for forward compatibility.
type OkpdServiceServer interface {
	GetSimilar(context.Context, *GetSimilarRequest) (*GetSimilarResponse, error)
	mustEmbedUnimplementedOkpdServiceServer()
}

// UnimplementedOkpdServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOkpdServiceServer struct{}

func (UnimplementedOkpdServiceServer) GetSimilar(context.Context, *GetSimilarRequest) (*GetSimilarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimilar not implemented")
}
func (UnimplementedOkpdServiceServer) mustEmbedUnimplementedOkpdServiceServer() {}
func (UnimplementedOkpdServiceServer) testEmbeddedByValue()                     {}

// UnsafeOkpdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OkpdServiceServer will
// result in compilation errors.
type UnsafeOkpdServiceServer interface {
	mustEmbedUnimplementedOkpdServiceServer()
}

func RegisterOkpdServiceServer(s grpc.ServiceRegistrar, srv OkpdServiceServer) {
	// If the following call pancis, it indicates UnimplementedOkpdServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OkpdService_ServiceDesc, srv)
}

func _OkpdService_GetSimilar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimilarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OkpdServiceServer).GetSimilar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OkpdService_GetSimilar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OkpdServiceServer).GetSimilar(ctx, req.(*GetSimilarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OkpdService_ServiceDesc is the grpc.ServiceDesc for OkpdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OkpdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.OkpdService",
	HandlerType: (*OkpdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSimilar",
			Handler:    _OkpdService_GetSimilar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}
